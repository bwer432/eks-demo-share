=====================================================================
GIVEN:
  - A developer desktop with docker & git installed (AWS Cloud9)
  - An EKS cluster named 'cluster-eksctl' has been created via 04-create-advanced-cluster-eksctl-existing-vpc
  - The AWS Loada Balancer Controller has been installed using IRSA
WHEN:
  - I install the rbac-lookup plugin
THEN:
  - I will be able to view the OIDC mapping of a K8s service account to an IAM Role (outbound IAM AuthN & AuthZ)
  - I will be able to see the K8s RBAC Bindings (internal K8s RBAC AuthZ)
SO THAT:
  - I can see how a K8s RBAC sa (service account) can be AuthZ to perform actions on AWS resources.

=====================================================================
(0) Requires

    04-create-advanced-cluster-eksctl-existing-vpc
    08-aws-lb-controller-ingress

(0) PreReqs

    (-) In the C9 instance IDE ... Set Required Key variables for Bash commands to refer to:

        export C9_REGION=$(curl --silent http://169.254.169.254/latest/dynamic/instance-identity/document |  grep region | awk -F '"' '{print$4}')
        echo $C9_REGION

        export C9_AWS_ACCT=$(curl -s http://169.254.169.254/latest/dynamic/instance-identity/document | grep accountId | awk -F '"' '{print$4}')
        echo $C9_AWS_ACCT

    (-) !!! In the C9 instance IDE ... Edit prefs to not use automated AWS credentials and pass your AWS Keys to the CLI otherwise eksctl & kubectl commands WILL FAIL !!!

        ---> Cloud9/Preferences
          ---> AWS Settings
            ---> Disable AWS managed temporary credentials radial button

        aws configure <--- Add your AWS account user Keys

        export AWS_ACCESS_KEY_ID=$(cat ~/.aws/credentials | grep aws_access_key_id | awk '{print$3}')
        export AWS_SECRET_ACCESS_KEY=$(cat ~/.aws/credentials | grep aws_secret_access_key | awk '{print$3}')
        aws sts get-caller-identity

(1) Setup eksctl & kubectl.

    (-) Install kubectl & set context:

        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        curl -LO "https://dl.k8s.io/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl.sha256"
        echo "$(<kubectl.sha256) kubectl" | sha256sum --check
        sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl

        eksctl utils write-kubeconfig --cluster cluster-eksctl --region $C9_REGION --authenticator-role-arn arn:aws:iam::${C9_AWS_ACCT}:role/cluster-eksctl-creator-role
        kubectl config view --minify
        kubectl get all -A

    (-) Install eksctl:

        curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
        sudo mv /tmp/eksctl /usr/local/bin
        eksctl version

(2) Install rbac-lookup utility

    (-) Install krew kubectl cli plugin manager on C9 Desktop

          (
          set -x; cd "$(mktemp -d)" &&
          OS="$(uname | tr '[:upper:]' '[:lower:]')" &&
          ARCH="$(uname -m | sed -e 's/x86_64/amd64/' -e 's/\(arm\)\(64\)\?.*/\1\2/' -e 's/aarch64$/arm64/')" &&
          curl -fsSLO "https://github.com/kubernetes-sigs/krew/releases/latest/download/krew.tar.gz" &&
          tar zxvf krew.tar.gz &&
          KREW=./krew-"${OS}_${ARCH}" &&
          "$KREW" install krew
          )
          export PATH="${KREW_ROOT:-$HOME/.krew}/bin:$PATH"

    (-) Install rbac-lookup plugin

          kubectl krew install rbac-lookup

(3) Review the AWS IAM Authenticator mapping for CodeBuild IAM role

    (-) Get the K8s RBAC service account used by the AWS loadbalancer Controller

          kubectl get deployment

          kubectl get deploy aws-load-balancer-controller -n kube-system -o yaml

          export LB_CTRLR_SA=$(kubectl get deploy aws-load-balancer-controller -n kube-system -o json | jq .spec.template.spec.serviceAccountName | tr -d '"')
          echo $LB_CTRLR_SA

    (-) View the K8s RBAC sa annotation 'mapping' the sa to assume an external IAM role using the clusters OIDC provider (AuthN)

          kubectl get sa $LB_CTRLR_SA -o yaml -n kube-system
          kubectl get sa $LB_CTRLR_SA -o json -n kube-system | jq .metadata.annotations


    (-) View the K8s RBAC bindings given to the mapped to the sa (K8s AuthZ)

          kubectl rbac-lookup -o user -o wide
          kubectl rbac-lookup $LB_CTRLR_SA -o wide

    (-) View how IAM trusts the cluster's OIDC provider

          export OIDC_URL=$(aws eks describe-cluster --name cluster-eksctl --query 'cluster.identity.oidc.issuer' --region $C9_REGION | tr -d '\"')
          echo $OIDC_URL

          aws iam list-open-id-connect-providers

    (-) View the permissions & conditions of the IAM role that the sa will assume

          export IAM_ROLE=$(kubectl get sa $LB_CTRLR_SA -o json -n kube-system | jq .metadata.annotations | grep role | awk -F'"' '{print$4}' | awk -F '/' '{print$2}' )
          echo $IAM_ROLE

          aws iam get-role --role-name $IAM_ROLE | jq .Role.AssumeRolePolicyDocument.Statement

          ---> Use Console to review Policies attached to the role.

(CLEANUP)

    (-) Cleanup Demo Script(s)
