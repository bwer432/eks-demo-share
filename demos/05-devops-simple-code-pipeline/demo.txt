=====================================================================
GIVEN:
  - A developer desktop with docker & git installed (AWS Cloud9)
  - An EKS cluster created via eksctl
  - Cloud Formation to create my devops environment
WHEN:
  - I apply my cloud formation
THEN:
  - I will get an IAM role for code pipeline/build
  - I will get a code commit repo w a simple python app & dockerfile in it
  - I will get a code pipeline pipeline with 2 stages
  - I will get a code pipeline stage 1 that triggers off of a commit to my code commit repo
  - I will get a code pipeline stage 2 that uses a code build action provider to build and push my image
SO THAT:
  - I can map my code pipeline/build IAM role to a K8s 'codepipeline' user
  - I can apply a K8s RBAC role to the  K8s 'codepipeline' user to 'apply' the application
  - I can demonstrate what happens if something outside of the pipeline alters the simple pipeline app.

=====================================================================
(0) Requires

    04-create-advanced-cluster-eksctl-existing-vpc

(0) PreReqs

    (-) Set the AWS Region variable for where you want to run these demos

        export C9_REGION=[[YOUR_REGION]]

    (-) Create/Update an EKS style VPC from your Desktop using AWS Cloudformation

        aws cloudformation deploy --region $C9_REGION --template-file ../01-docker-build-wordpress/pre-reqs/cfn-amazon-eks-vpc-private-subnets.cfn \
          --stack-name eks-demos-networking

    (-) Create/Update C9 Instance within the VPC. You will run all subsequent demo steps from a console on the C9 Instance.

        aws cloudformation deploy --region $C9_REGION --template-file ../01-docker-build-wordpress/pre-reqs/cfn-c9-desktop.cfn \
          --stack-name eks-demos-c9-dev-desktop

    (-) Navigate to C9 Instance 'terminal' window of the IDE & resize the disk

        https://console.aws.amazon.com/cloud9/home?
        ---> Open IDE to exec all remaining demo commands within the C9 desktop

        cd ~/environment
        if [ ! -d mglab-share-eks ]; then git clone https://github.com/virtmerlin/mglab-share-eks.git; fi
        chmod 755 ./mglab-share-eks/demos/01-docker-build-wordpress/pre-reqs/resize.sh
        ./mglab-share-eks/demos/01-docker-build-wordpress/pre-reqs/resize.sh
        export C9_REGION=$(curl --silent http://169.254.169.254/latest/dynamic/instance-identity/document |  grep region | awk -F '"' '{print$4}')
        echo $C9_REGION

    (-) In the C9 Desktop ... Edit prefs to not use automated AWS creds and pass your AWS Keys to the CLI otherwise eksctl will fail

        ----> Cloud9/Preferences
          ----> AWS Settings
            ----> Disable AWS managed temporary credentials radial button

        aws configure

(1) Deploy CodeCommit, ECR, & Code Pipeline/Build Cloud Formation

  (-) Deploy CloudFormation to create pipeline environment

        cd ~/environment/mglab-share-eks/demos/05-devops-simple-code-pipeline
        aws cloudformation deploy --region $C9_REGION --template-file ./artifacts/05-DEMO-simple-CodePipeline-Build.cfn \
        --capabilities CAPABILITY_IAM \
        --parameter-overrides EKSClusterName=cluster-eksctl \
        --stack-name eks-demos-05-devops-simple-code-pipeline

(2) Install kubectl & Update our kubeconfig to interact with the cluster created in 04-create-advanced-cluster-eksctl-existing-vpc

  (-) Install kubectl & review your kubeconfig

        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        curl -LO "https://dl.k8s.io/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl.sha256"
        echo "$(<kubectl.sha256) kubectl" | sha256sum --check
        sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl

        export AWS_ACCESS_KEY_ID=$(cat ~/.aws/credentials | grep aws_access_key_id | awk '{print$3}')
        export AWS_SECRET_ACCESS_KEY=$(cat ~/.aws/credentials | grep aws_secret_access_key | awk '{print$3}')
        aws sts get-caller-identity

        eksctl utils write-kubeconfig --name cluster-eksctl --region $C9_REGION
        kubectl config view --minify
        kubectl get all -A

(3) Setup AuthN & AuthZ to let our codepipeline run a kubectl apply

  (-) Get IAM role name for Codebuild created by Cloudformation

        export CODEBUILD_IAM_ARN=$(aws cloudformation --region $C9_REGION \
        describe-stacks \
        --stack-name eks-demos-05-devops-simple-code-pipeline \
        --query "Stacks[].Outputs[?OutputKey=='CodeBuildIAMRole'].[OutputValue]" \
        --output text)
        echo $CODEBUILD_IAM_ARN

  (-) Create K8s RBAC Role & Bindings for a K*s RBAC user name 'codebuild' in simple-k8s-codepipeline namespace.

        kubectl apply -f ./artifacts/05-DEMO-simple-CodePipeline-k8s-RBAC.yaml

  (-) Update 'cm aws-auth -n kube-system' for CodeBuild IAM Role to be mapped to a RBAC user called 'codebuild' in K8s.

        ROLE="    - rolearn: $CODEBUILD_IAM_ARN\n      username: codebuild\n      groups:\n        - codepipeline:codebuild"
        kubectl get -n kube-system configmap/aws-auth -o yaml | awk "/mapRoles: \|/{print;print \"$ROLE\";next}1" > /tmp/aws-auth-patch.yml
        kubectl patch configmap/aws-auth -n kube-system --patch "$(cat /tmp/aws-auth-patch.yml)"

        kubectl get -n kube-system configmap/aws-auth -o yaml

(4) Push the simple python App/Dockerfile to CodeCommit & trigger Code Pipeline

  (-) Setup the git credential helper and clone empty CodeCommit repo into C9 Desktop

        export AWS_ACCESS_KEY_ID=$(cat ~/.aws/credentials | grep aws_access_key_id | awk '{print$3}')
        export AWS_SECRET_ACCESS_KEY=$(cat ~/.aws/credentials | grep aws_secret_access_key | awk '{print$3}')
        aws sts get-caller-identity

        git config --global credential.helper '!aws codecommit credential-helper $@'
        git config --global credential.UseHttpPath true

  (-) Commit & 'Init' Push to the CodeCommit repo with the sample python application/Dockerfile

        cd ~/environment/
        git clone https://git-codecommit.us-west-1.amazonaws.com/v1/repos/eks-demo-05-simple-codepipeline-cc
        cd ~/environment/eks-demo-05-simple-codepipeline-cc

        cp ~/environment/mglab-share-eks/demos/05-devops-simple-code-pipeline/artifacts/simple-app/* ./
        git add -A
        git commit -am "init"
        git push origin

        ---> Confirm commits in AWS Console
        ---> Confirm Code Pipeline runs OK in AWS Console

(3) Verify simple python app is running and LoadBalancer service is running.  Then 'devops' some changes.

  (-) Check if svc is running

        kubectl get svc -o wide -n simple-k8s-codepipeline
        ---> Open External-IP , make note of "Bubba Congratulations"

  (-) Edit the Python code to say hello to Fred Instead [Totally a Sanford & Son ref goin on :)]

        sed -i 's/Bubba/Fred/' application.py
        git commit -am "Switched Greeting from Bubba to Fred"
        git push origin
        ---> Review in Console for codepipeline
        ---> Answer:
          ---> How did we enable the Pipeline to apply to EKS cluster?
          ---> Did our change take effect correctly ?
          ---> What happens if we issue 'kubectl delete ns simple-k8s-codepipeline' ?

        kubectl get svc -o wide -n simple-k8s-codepipeline

(CLEANUP)

  (-) Cleanup Demo Script(s)

        export RM_ARTIFACT_BUCKET=$(aws cloudformation list-stack-resources --region $C9_REGION  --stack-name eks-demos-05-devops-simple-code-pipeline  --query StackResourceSummaries[].PhysicalResourceId | grep artifactbucket | awk -F '"' '{print$2}')
        aws s3 rb s3://$RM_ARTIFACT_BUCKET --force
        aws ecr delete-repository --region $C9_REGION --repository-name eks-demo-05-simple-codepipeline-ecr --force
        aws cloudformation delete-stack --region $C9_REGION  --stack-name eks-demos-05-devops-simple-code-pipeline
        aws cloudformation wait stack-delete-complete --region $C9_REGION --stack-name eks-demos-05-devops-simple-code-pipeline

  (-) Cleanup Pre-Reqs Script(s)

        aws cloudformation delete-stack --region $C9_REGION --stack-name eks-demos-c9-dev-desktop
        aws cloudformation wait stack-delete-complete --region $C9_REGION --stack-name eks-demos-c9-dev-desktop
