=====================================================================
GIVEN:
  - A developer desktop with docker & git installed (AWS Cloud9)
  - An EKS cluster named 'cluster-eksctl' has been created via 04-create-advanced-cluster-eksctl-existing-vpc
WHEN:
  - I create a service mesh with istio
  - I enable tracing with jaeger
THEN:
  - Simulate traffic to the Service mesh
SO THAT:
  - I can see how CNCF service mesh and tracing works on EKS

=====================================================================
(0) Requires

    04-create-advanced-cluster-eksctl-existing-vpc

(0) PreReqs

    (-) In the C9 instance IDE ... Set Required Key variables for Bash commands to refer to:

        export C9_REGION=$(curl --silent http://169.254.169.254/latest/dynamic/instance-identity/document |  grep region | awk -F '"' '{print$4}')
        echo $C9_REGION

        export C9_AWS_ACCT=$(curl -s http://169.254.169.254/latest/dynamic/instance-identity/document | grep accountId | awk -F '"' '{print$4}')
        echo $C9_AWS_ACCT

    (-) !!! In the C9 instance IDE ... Edit prefs to not use automated AWS credentials and pass your AWS Keys to the CLI otherwise eksctl & kubectl commands WILL FAIL !!!

        ---> Cloud9/Preferences
          ---> AWS Settings
            ---> Disable AWS managed temporary credentials radial button

        aws configure <--- Add your AWS account user Keys

        export AWS_ACCESS_KEY_ID=$(cat ~/.aws/credentials | grep aws_access_key_id | awk '{print$3}')
        export AWS_SECRET_ACCESS_KEY=$(cat ~/.aws/credentials | grep aws_secret_access_key | awk '{print$3}')
        aws sts get-caller-identity

(1) Setup eksctl & kubectl.

    (-) Install kubectl & set context:

        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        curl -LO "https://dl.k8s.io/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl.sha256"
        echo "$(<kubectl.sha256) kubectl" | sha256sum --check
        sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl

        eksctl utils write-kubeconfig --cluster cluster-eksctl --region $C9_REGION --authenticator-role-arn arn:aws:iam::${C9_AWS_ACCT}:role/cluster-eksctl-creator-role
        kubectl config view --minify
        kubectl get all -A

    (-) Install eksctl:

        curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
        sudo mv /tmp/eksctl /usr/local/bin
        eksctl version

(2) Install Istio & Jeager

    (-) Install istioctl

        cd ~/environment/mglab-share-eks/demos/08-servicemesh-tracing-istio-and-jaeger
        curl -L https://git.io/getLatestIstio | sh -
        cd istio-1.*
        sudo cp ./bin/istioctl /usr/local/bin/
        sudo chmod +x /usr/local/bin/istioctl

    (-) Install istio with istioctl

        istioctl install --set profile=demo --set hub=gcr.io/istio-release -y
        kubectl -n istio-system get deploy
        kubectl get svc -n istio-system

        istioctl verify-install

        docker login

        kubectl create secret generic regcred -n istio-system \
          --from-file=.dockerconfigjson=/home/ec2-user/.docker/config.json \
          --type=kubernetes.io/dockerconfigjson

        for i in $(kubectl get sa -n istio-system | grep -v NAME | awk '{print$1}');do
            kubectl patch sa $i -n istio-system -p '"imagePullSecrets": [{"name": "regcred" }]'
          done

        for i in $(kubectl get deploy -n istio-system | grep -v NAME | awk '{print$1}');do
            kubectl rollout restart deployments/$i -n istio-system
          done

        watch kubectl get all -n istio-system

  (3) Deploy Sample Application

        kubectl create namespace istio-bookinfo
        kubectl label namespace istio-bookinfo istio-injection=enabled

        kubectl create secret generic regcred -n istio-bookinfo \
          --from-file=.dockerconfigjson=/home/ec2-user/.docker/config.json \
          --type=kubernetes.io/dockerconfigjson

        kubectl get secret regcred -n istio-bookinfo --output="jsonpath={.data.\.dockerconfigjson}" | base64 --decode

        kubectl apply -f ./samples/bookinfo/platform/kube/bookinfo.yaml -n istio-bookinfo

        for i in $(kubectl get sa -n istio-bookinfo | grep -v NAME | awk '{print$1}');do
            kubectl patch sa $i -n istio-bookinfo -p '"imagePullSecrets": [{"name": "regcred" }]'
          done

        for i in $(kubectl get deploy -n istio-bookinfo | grep -v NAME | awk '{print$1}');do
            kubectl rollout restart deployments/$i -n istio-bookinfo
          done

        kubectl apply -f ./samples/bookinfo/networking/bookinfo-gateway.yaml -n istio-bookinfo

        export INGRESS_HOST=$(kubectl -n istio-system \
        get service istio-ingressgateway \
        -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')

        export INGRESS_PORT=$(kubectl -n istio-system \
        get service istio-ingressgateway \
        -o jsonpath='{.spec.ports[?(@.name=="http2")].port}')

        echo GATEWAY_URL=$INGRESS_HOST:$INGRESS_PORT/productpage

        GWAY=== aef7842e779884ca6847478881d9c545-858456123.us-west-1.elb.amazonaws.com:80/productpage

  (4) Review kiali & jaeger dashboards

        kubectl apply -f samples/addons (x2)

        GWAY=== aef7842e779884ca6847478881d9c545-858456123.us-west-1.elb.amazonaws.com:80/productpage

        (On Mac)

          - eksctl utils write-kubeconfig --cluster cluster-eksctl --region us-west-1 --authenticator-role-arn arn:aws:iam::987210092513:role/cluster-eksctl-creator-role
          - istioctl dashboard kiali

                kubectl apply -f ./samples/bookinfo/networking/destination-rule-reviews.yaml -n istio-bookinfo
                kubectl apply -f ./samples/bookinfo/networking/virtual-service-reviews-test-v2.yaml -n istio-bookinfo <<<< Jason
                kubectl apply -f ./samples/bookinfo/networking/virtual-service-reviews-50-v3.yaml -n istio-bookinfo

                kubectl delete virtualservice.networking.istio.io/reviews -n istio-bookinfo
                kubectl delete destinationrule.networking.istio.io/reviews -n istio-bookinfo


          - istioctl dashboard jaeger

(CLEANUP)

    (-) Cleanup Demo Script(s)

        istioctl x uninstall --purge -y
        kubectl delete ns istio-bookinfo
        kubectl delete ns istio-system
