=====================================================================
GIVEN:
  - A developer desktop with docker & git installed (AWS Cloud9)
  - An EKS cluster named 'cluster-eksctl' has been created via 04-create-advanced-cluster-eksctl-existing-vpc
WHEN:
  - I deploy the AWS LoadBalancer Controller
THEN:
  - I will deploy and Ingress a workload
SO THAT:
  - I can see how the Controller & AWS ALB exposes an ingress service

=====================================================================
(0) Requires

    04-create-advanced-cluster-eksctl-existing-vpc

(0) PreReqs

    (-) In the C9 instance IDE ... Set Required Key variables for Bash commands to refer to:

        export C9_REGION=$(curl --silent http://169.254.169.254/latest/dynamic/instance-identity/document |  grep region | awk -F '"' '{print$4}')
        echo $C9_REGION

        export C9_AWS_ACCT=$(curl -s http://169.254.169.254/latest/dynamic/instance-identity/document | grep accountId | awk -F '"' '{print$4}')
        echo $C9_AWS_ACCT

    (-) !!! In the C9 instance IDE ... Edit prefs to not use automated AWS credentials and pass your AWS Keys to the CLI otherwise eksctl & kubectl commands WILL FAIL !!!

        ---> Cloud9/Preferences
          ---> AWS Settings
            ---> Disable AWS managed temporary credentials radial button

        aws configure <--- Add your AWS account user Keys

        export AWS_ACCESS_KEY_ID=$(cat ~/.aws/credentials | grep aws_access_key_id | awk '{print$3}')
        export AWS_SECRET_ACCESS_KEY=$(cat ~/.aws/credentials | grep aws_secret_access_key | awk '{print$3}')
        aws sts get-caller-identity

(1) Setup eksctl & kubectl.

    (-) Install kubectl & set context:

        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        curl -LO "https://dl.k8s.io/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl.sha256"
        echo "$(<kubectl.sha256) kubectl" | sha256sum --check
        sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl

        eksctl utils write-kubeconfig --cluster cluster-eksctl --region $C9_REGION --authenticator-role-arn arn:aws:iam::${C9_AWS_ACCT}:role/cluster-eksctl-creator-role
        kubectl config view --minify
        kubectl get all -A

    (-) Install eksctl:

        curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
        sudo mv /tmp/eksctl /usr/local/bin
        eksctl version

(2) Install AWS load balancer Controller.
    ---> https://docs.aws.amazon.com/eks/latest/userguide/alb-ingress.html

    (-) Create/Update IRSA (Iam Role Service Account) to be used by the load balancer controller:

        eksctl utils associate-iam-oidc-provider  --region $C9_REGION --cluster cluster-eksctl --approve
        eksctl create iamserviceaccount --region $C9_REGION --cluster=cluster-eksctl --namespace=kube-system --name=aws-load-balancer-controller --attach-policy-arn=arn:aws:iam::$C9_AWS_ACCT:policy/AWSLoadBalancerControllerIAMPolicy --override-existing-serviceaccounts --approve
        eksctl get iamserviceaccount --cluster cluster-eksctl --region $C9_REGION

    (-) Install CRDs for the AWS LB Controller:

        kubectl apply -k "github.com/aws/eks-charts/stable/aws-load-balancer-controller//crds?ref=master"

    (-) Install helm v3:

        curl https://raw.githubusercontent.com/kubernetes/helm/master/scripts/get-helm-3 > get_helm.sh
        chmod 700 get_helm.sh
        ./get_helm.sh

    (-) Install AWS Loadbalancer controller via Helm Chart:

        helm repo add eks https://aws.github.io/eks-charts
        helm repo update
        helm upgrade -i aws-load-balancer-controller eks/aws-load-balancer-controller \
          --set clusterName=cluster-eksctl \
          --set serviceAccount.create=false \
          --set serviceAccount.name=aws-load-balancer-controller -n kube-system

    (-) Verify the controller is running and review the IRSA account:

        kubectl get deployment -n kube-system aws-load-balancer-controller

        kubectl get sa aws-load-balancer-controller -n kube-system -o yaml

(3) Deploy game2048 using Ingress.

    (-) Deploy and test:

        cd ~/environment/mglab-share-eks/demos/08-aws-lb-controller-ingress

        kubectl apply -f ./artifacts/08-DEMO-ingress-app.yaml
        kubectl get ingress -n game-2048



(CLEANUP)

    (-) Cleanup Demo Script(s)

        kubectl delete -f ./artifacts/08-DEMO-ingress-app.yaml
        helm delete aws-load-balancer-controller -n kube-system
        kubectl delete -k "github.com/aws/eks-charts/stable/aws-load-balancer-controller//crds?ref=master"
