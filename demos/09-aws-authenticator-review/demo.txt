=====================================================================
GIVEN:
  - A developer desktop with docker & git installed (AWS Cloud9)
  - An EKS cluster named 'cluster-eksctl' has been created via 04-create-advanced-cluster-eksctl-existing-vpc
  - An AWS CodeBuild project in an AWS CodePipeline has been authorized to deploy a workload
WHEN:
  - I install the rbac-lookup plugin
THEN:
  - I will be able to view the mapping of an IAM role to a K8s User (AuthN)
  - I will be able to see the K8s RBAC Bindings (AuthZ)
SO THAT:
  - I can see how an external IAM user/role can be Authorized to do things inside of an eks cluster

=====================================================================
(0) Requires

    04-create-advanced-cluster-eksctl-existing-vpc
    05-devops-simple-code-pipeline

(0) PreReqs

    (-) In the C9 instance IDE ... Set Required Key variables for Bash commands to refer to:

        export C9_REGION=$(curl --silent http://169.254.169.254/latest/dynamic/instance-identity/document |  grep region | awk -F '"' '{print$4}')
        echo $C9_REGION

        export C9_AWS_ACCT=$(curl -s http://169.254.169.254/latest/dynamic/instance-identity/document | grep accountId | awk -F '"' '{print$4}')
        echo $C9_AWS_ACCT

    (-) !!! In the C9 instance IDE ... Edit prefs to not use automated AWS credentials and pass your AWS Keys to the CLI otherwise eksctl & kubectl commands WILL FAIL !!!

        ---> Cloud9/Preferences
          ---> AWS Settings
            ---> Disable AWS managed temporary credentials radial button

        aws configure <--- Add your AWS account user Keys

        export AWS_ACCESS_KEY_ID=$(cat ~/.aws/credentials | grep aws_access_key_id | awk '{print$3}')
        export AWS_SECRET_ACCESS_KEY=$(cat ~/.aws/credentials | grep aws_secret_access_key | awk '{print$3}')
        aws sts get-caller-identity

(1) Setup eksctl & kubectl.

    (-) Install kubectl & set context:

        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        curl -LO "https://dl.k8s.io/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl.sha256"
        echo "$(<kubectl.sha256) kubectl" | sha256sum --check
        sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl

        eksctl utils write-kubeconfig --cluster cluster-eksctl --region $C9_REGION --authenticator-role-arn arn:aws:iam::${C9_AWS_ACCT}:role/cluster-eksctl-creator-role
        kubectl config view --minify
        kubectl get all -A

    (-) Install eksctl:

        curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
        sudo mv /tmp/eksctl /usr/local/bin
        eksctl version

(2) Install rbac-lookup utility

    (-) Install krew kubectl cli plugin manager on C9 Desktop

          (
          set -x; cd "$(mktemp -d)" &&
          OS="$(uname | tr '[:upper:]' '[:lower:]')" &&
          ARCH="$(uname -m | sed -e 's/x86_64/amd64/' -e 's/\(arm\)\(64\)\?.*/\1\2/' -e 's/aarch64$/arm64/')" &&
          curl -fsSLO "https://github.com/kubernetes-sigs/krew/releases/latest/download/krew.tar.gz" &&
          tar zxvf krew.tar.gz &&
          KREW=./krew-"${OS}_${ARCH}" &&
          "$KREW" install krew
          )
          export PATH="${KREW_ROOT:-$HOME/.krew}/bin:$PATH"

    (-) Install rbac-lookup plugin

          kubectl krew install rbac-lookup

(3) Review the AWS IAM Authenticator mapping for CodeBuild IAM role

    (-) Get IAM role used by the AWS CodePipeline/CodeBuild project

          export CODEBUILD_IAM_ARN=$(aws cloudformation --region $C9_REGION \
          describe-stacks \
          --stack-name eks-demos-05-devops-simple-code-pipeline \
          --query "Stacks[].Outputs[?OutputKey=='CodeBuildIAMRole'].[OutputValue]" \
          --output text)

          echo $CODEBUILD_IAM_ARN

    (-) View the AWS IAM Authenticator mapping (AuthN)

          kubectl get cm aws-auth -o yaml -n kube-system
          kubectl get cm aws-auth -o yaml -n kube-system | grep -B 2 -A 1 $CODEBUILD_IAM_ARN

    (-) View the K8s RBAC bindings given to the mapped codebuild user (AuthZ)

          cd ~/environment/mglab-share-eks/demos/09-aws-authenticator-review
          kubectl apply -f ./artifacts/09-DEMO-simple-CodePipeline-k8s-RBAC.yaml

          kubectl rbac-lookup -o user -o wide
          kubectl rbac-lookup codebuild -o wide

          kubectl get Role/simple-k8s-codepipeline-role -n simple-k8s-codepipeline -o yaml
          kubectl get RoleBinding/simple-k8s-codepipeline-admin -n simple-k8s-codepipeline -o yaml

(CLEANUP)

    (-) Cleanup Demo Script(s)
